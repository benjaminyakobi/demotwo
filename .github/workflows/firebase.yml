# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI Build-Test-Deploy-Release

# when the following workflow runs, it will be paused with the status pending if any job or workflow that uses the production concurrency group is in progress. It will also cancel any job or workflow that uses the production concurrency group and has the status pending. This means that there will be a maximum of one running and one pending job or workflow in that uses the production concurrency group.

#cancel-in-progress to cancel any currently running job or workflow in the same concurrency group. This means that there will be a maximum of one running and zero pending job or workflow in that uses the production concurrency group.
concurrency:
  group: production
  cancel-in-progress: true

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-project:
    name: Build project
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install yarn package manager
        run: npm i yarn --legacy-peer-deps
      - name: Install dependencies with yarn
        run: yarn install
      - name: Build project assets
        run: yarn build
      - name: Archive project assets
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  test-project:
    name: Test project
    needs: build-project
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install yarn package manager
        run: npm i yarn --legacy-peer-deps
      - name: Install dependencies with yarn
        run: yarn install
      - name: Run tests
        run: yarn test

  deploy-project:
    name: Deploy project
    needs: test-project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Test artifact download
        run: ls -R
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  release-project:
    name: Release project
    needs: deploy-project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Test artifact download
        run: ls -R
      - name: Archive project assets
        uses: thedoctor0/zip-release@main
        with:
          filename: "project.zip"
      - name: Create release
        id: create_release_id
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # provided by Actions
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_id.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          asset_path: ./project.zip
          asset_name: project-v${{ github.run_number }}.zip
          asset_content_type: application/zip
